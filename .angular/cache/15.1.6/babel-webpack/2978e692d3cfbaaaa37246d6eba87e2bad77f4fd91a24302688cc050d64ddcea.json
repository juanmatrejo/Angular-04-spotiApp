{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// @Injectable()\nexport class SpotifyService {\n  constructor(_httpClient) {\n    this._httpClient = _httpClient;\n    console.log('_spotifyService ready!!');\n  }\n  getService(query) {\n    const serviceBase = `https://api.spotify.com/v1/${query}`;\n    const headers = new HttpHeaders({\n      'Authorization': 'Bearer BQBhfTT_OyPcqpgUVypgaLgDQjWe7m_XAlS7plSOriq2TH4VJ4ygoByQ4fupSvnWnHHMaLxSJX2Jx28LlSYhQigfTnWyvrUDA4Tm0iVpYUUpHR0Ke3Ir'\n    });\n    return this._httpClient.get(serviceBase, {\n      headers\n    });\n  }\n  getNewReleases() {\n    // const tokenParams:any  = {\n    //     grant_type: 'client_credentials',\n    //     client_id: 'd6b55734aa3f4b49af89ae8023b6c69e',\n    //     client_secret: '4659ca881ead4eed81c45197f071db34'\n    // };\n    // let token: string;\n    // this._httpClient.post('https://accounts.spotify.com/api/token', tokenParams)\n    //     .subscribe((data: any) => {\n    //         token = `${data.token_type} ${data.access_token}`;\n    //         console.log(token);\n    //     });\n    return this.getService('browse/new-releases?limit=40').pipe(map(data => {\n      return data['albums'].items;\n    }));\n  }\n  searchArtist(searchValue) {\n    console.log('service searching...');\n    console.log(searchValue);\n    let query = `search?q=${searchValue}&type=artist&limit=20`;\n    return this.getService(query).pipe(map(data => data['artists'].items));\n  }\n  getArtist(id) {\n    console.log(id);\n    let query = `artists/${id}`;\n    return this.getService(query);\n    // .pipe((data: any) => data['artists'].items);\n  }\n\n  getTopTracks(id) {\n    console.log('top serv');\n    console.log(id);\n    let query = `artists/${id}/top-tracks?market=MX`;\n    return this.getService(query).pipe(data => {\n      console.log(data);\n      return data;\n    });\n  }\n}\nSpotifyService.ɵfac = function SpotifyService_Factory(t) {\n  return new (t || SpotifyService)(i0.ɵɵinject(i1.HttpClient));\n};\nSpotifyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SpotifyService,\n  factory: SpotifyService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAqB,sBAAsB;AAC3E,SAASC,GAAG,QAAQ,gBAAgB;;;AAKpC;AACA,OAAM,MAAOC,cAAc;EAEvBC,YAAoBC,WAAuB;IAAvB,gBAAW,GAAXA,WAAW;IAC3BC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;EAC1C;EAEAC,UAAU,CAACC,KAAa;IAEpB,MAAMC,WAAW,GAAW,8BAA8BD,KAAK,EAAE;IACjE,MAAME,OAAO,GAAgB,IAAIV,WAAW,CAAC;MACzC,eAAe,EAAE;KACpB,CAAC;IAEF,OAAO,IAAI,CAACI,WAAW,CAACO,GAAG,CAACF,WAAW,EAAE;MAAEC;IAAO,CAAE,CAAC;EACzD;EAEAE,cAAc;IAEV;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IAEA,OAAO,IAAI,CAACL,UAAU,CAAC,8BAA8B,CAAC,CACjDM,IAAI,CAACZ,GAAG,CAAEa,IAAS,IAAI;MACpB,OAAOA,IAAI,CAAC,QAAQ,CAAC,CAACC,KAAK;IAC/B,CAAC,CAAC,CAAC;EACX;EAEAC,YAAY,CAACC,WAAmB;IAE5BZ,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnCD,OAAO,CAACC,GAAG,CAACW,WAAW,CAAC;IAExB,IAAIT,KAAK,GAAW,YAAYS,WAAW,uBAAuB;IAElE,OAAO,IAAI,CAACV,UAAU,CAACC,KAAK,CAAC,CACxBK,IAAI,CAACZ,GAAG,CAAEa,IAAS,IAAKA,IAAI,CAAC,SAAS,CAAC,CAACC,KAAK,CAAC,CAAC;EACxD;EAEAG,SAAS,CAACC,EAAU;IAEhBd,OAAO,CAACC,GAAG,CAACa,EAAE,CAAC;IAEf,IAAIX,KAAK,GAAW,WAAWW,EAAE,EAAE;IAEnC,OAAO,IAAI,CAACZ,UAAU,CAACC,KAAK,CAAC;IAC7B;EACJ;;EAEAY,YAAY,CAACD,EAAU;IAEnBd,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;IACvBD,OAAO,CAACC,GAAG,CAACa,EAAE,CAAC;IAEf,IAAIX,KAAK,GAAW,WAAWW,EAAE,uBAAuB;IAExD,OAAO,IAAI,CAACZ,UAAU,CAACC,KAAK,CAAC,CACxBK,IAAI,CAAEC,IAAS,IAAI;MAChBT,OAAO,CAACC,GAAG,CAACQ,IAAI,CAAC;MACjB,OAAOA,IAAI;IACf,CAAC,CAAC;EACV;;;mBAtESZ,cAAc;AAAA;;SAAdA,cAAc;EAAAmB,SAAdnB,cAAc;EAAAoB,YAHX;AAAM","names":["HttpHeaders","map","SpotifyService","constructor","_httpClient","console","log","getService","query","serviceBase","headers","get","getNewReleases","pipe","data","items","searchArtist","searchValue","getArtist","id","getTopTracks","factory","providedIn"],"sourceRoot":"","sources":["C:\\Angular\\04-spotiApp\\src\\app\\services\\spotify.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpRequest } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\n// @Injectable()\nexport class SpotifyService {\n\n    constructor(private _httpClient: HttpClient) {\n        console.log('_spotifyService ready!!');\n    }\n\n    getService(query: string) {\n\n        const serviceBase: string = `https://api.spotify.com/v1/${query}`;\n        const headers: HttpHeaders = new HttpHeaders({\n            'Authorization': 'Bearer BQBhfTT_OyPcqpgUVypgaLgDQjWe7m_XAlS7plSOriq2TH4VJ4ygoByQ4fupSvnWnHHMaLxSJX2Jx28LlSYhQigfTnWyvrUDA4Tm0iVpYUUpHR0Ke3Ir'\n        });\n\n        return this._httpClient.get(serviceBase, { headers });\n    }\n\n    getNewReleases() {\n\n        // const tokenParams:any  = {\n        //     grant_type: 'client_credentials',\n        //     client_id: 'd6b55734aa3f4b49af89ae8023b6c69e',\n        //     client_secret: '4659ca881ead4eed81c45197f071db34'\n        // };\n\n        // let token: string;\n        // this._httpClient.post('https://accounts.spotify.com/api/token', tokenParams)\n        //     .subscribe((data: any) => {\n        //         token = `${data.token_type} ${data.access_token}`;\n        //         console.log(token);\n        //     });\n\n        return this.getService('browse/new-releases?limit=40')\n            .pipe(map((data: any) => {\n                return data['albums'].items;\n            }));\n    }\n\n    searchArtist(searchValue: string) {\n\n        console.log('service searching...');\n        console.log(searchValue);\n\n        let query: string = `search?q=${searchValue}&type=artist&limit=20`;\n\n        return this.getService(query)\n            .pipe(map((data: any) => data['artists'].items));\n    }\n\n    getArtist(id: string) {\n\n        console.log(id);\n\n        let query: string = `artists/${id}`;\n\n        return this.getService(query);\n        // .pipe((data: any) => data['artists'].items);\n    }\n\n    getTopTracks(id: string) {\n\n        console.log('top serv');\n        console.log(id);\n\n        let query: string = `artists/${id}/top-tracks?market=MX`;\n\n        return this.getService(query)\n            .pipe((data: any) => {\n                console.log(data);\n                return data;\n            });\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}